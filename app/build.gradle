import org.jetbrains.kotlin.gradle.tasks.KotlinCompile
import io.gitlab.arturbosch.detekt.Detekt

plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-parcelize'
    id 'org.jetbrains.kotlin.android'
    id 'com.google.devtools.ksp'
    id 'com.google.dagger.hilt.android'
    id 'androidx.room'
    id 'io.gitlab.arturbosch.detekt'
}

android {
    defaultConfig {
        applicationId 'org.vinaygopinath.launchchat'
        minSdkVersion 23
        compileSdk 35
        targetSdkVersion 35
        versionCode 6
        versionName "1.4.1"
        multiDexEnabled true

    }
    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        coreLibraryDesugaringEnabled true

        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    kotlinOptions {
        tasks.withType(KotlinCompile).configureEach {
            kotlinOptions.jvmTarget = "17"
        }
    }
    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }
    testFixtures {
        enable = true
    }
    packagingOptions {
        resources.excludes += "DebugProbesKt.bin"
    }
    defaultConfig {
        testInstrumentationRunner "org.vinaygopinath.launchchat.LaunchChatTestRunner"
    }
    room {
        schemaDirectory "$projectDir/schemas"
    }

    namespace 'org.vinaygopinath.launchchat'
}

detekt {
    toolVersion = "1.23.8"
    sourceSets = files("src/main/kotlin", "src/test/kotlin", "src/androidTest/kotlin", "src/testFixtures/kotlin")
    config.setFrom(file("../config/detekt/detekt.yml"))
    buildUponDefaultConfig = true
    ignoredBuildTypes = ["release"]
    basePath = projectDir
}

tasks.withType(Detekt).configureEach {
    reports {
        html.required.set(true)
        html.outputLocation.set(file("build/reports/detekt/detekt.html"))
        sarif.required.set(true)
        sarif.outputLocation.set(file("build/reports/detekt/detekt.sarif"))

        md.required.set(false)
        xml.required.set(false)
        txt.required.set(false)
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    coreLibraryDesugaring(libs.desugarjdklibs)

    detektPlugins(libs.detekt.formatting)

    implementation(libs.appcompat)
    implementation(libs.preference)
    implementation(libs.activity)

    implementation(libs.material)
    implementation(libs.core)
    implementation(libs.kotlin)
    testFixturesImplementation(libs.kotlin)

    ksp(libs.hilt.compiler)
    implementation(libs.hilt.android)
    kspTest(libs.hilt.compiler)
    testImplementation(libs.hilt.testing)
    testImplementation(libs.hilt.android)
    testFixturesImplementation(libs.hilt.testing)
    testFixturesImplementation(libs.hilt.android)

    implementation(libs.libphonenumber)
    implementation(libs.vcard4android)
    implementation(libs.paging)

    implementation(libs.coroutines.android)
    testImplementation(libs.coroutines.test)

    implementation(libs.room.kotlin)
    implementation(libs.room.runtime)
    implementation(libs.room.paging)
    annotationProcessor(libs.room.compiler)
    ksp(libs.room.compiler)
    testImplementation(libs.room.testing)

    testImplementation(libs.junit)
    testImplementation(libs.robolectric)
    testImplementation(libs.bundles.test)
    testFixturesImplementation(libs.bundles.test)
    testImplementation(libs.truth)
    testImplementation(libs.mockito)

    androidTestImplementation(libs.bundles.test)
    androidTestImplementation(libs.bundles.espresso)
    androidTestImplementation(libs.hilt.testing)
    androidTestImplementation(libs.hilt.android)
}

